use super::config::Config;
use serde::{Deserialize, Serialize};
use serde_with::serde_as;
use starknet_core::serde::unsigned_field_element::UfeHex;
use starknet_crypto::Felt;

// Commitment for a vector of field elements.
#[serde_as]
#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct Commitment {
    pub config: Config,
    #[serde_as(as = "UfeHex")]
    pub commitment_hash: Felt,
}

// A query to the vector commitment.
#[serde_as]
#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct Query {
    #[serde_as(as = "UfeHex")]
    pub index: Felt,
    #[serde_as(as = "UfeHex")]
    pub value: Felt,
}

// A query to the vector commitment that contains also the depth of the query in the Merkle tree.
#[serde_as]
#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct QueryWithDepth {
    #[serde_as(as = "UfeHex")]
    pub index: Felt,
    #[serde_as(as = "UfeHex")]
    pub value: Felt,
    #[serde_as(as = "UfeHex")]
    pub depth: Felt,
}

// Witness for a decommitment over queries.
#[serde_as]
#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct Witness {
    // The authentication values: all the siblings of the subtree generated by the queried indices,
    // bottom layer up, left to right.
    #[serde_as(as = "Vec<UfeHex>")]
    pub authentications: Vec<Felt>,
}
